cmake_minimum_required(VERSION 3.16)
project(mstd VERSION 1.2.0 LANGUAGES CXX)

option(MSTD_ENABLE_CXX20 OFF)

if (MSTD_ENABLE_CXX20)
	set(CMAKE_CXX_STANDARD 20)
else()
	set(CMAKE_CXX_STANDARD 17)
endif()
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

option(BUILD_MSTD_TESTS "Build mstd tests" OFF)

include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/third_party.cmake)

# header files
set(PROJECT_HEADERS ${PROJECT_NAME}_HEADERS)
set(BUILD_HEADERS_PATH ${CMAKE_CURRENT_SOURCE_DIR}/include)

file(GLOB HEADERS_PATHS LIST_DIRECTORIES true LIST_FILES false ${BUILD_HEADERS_PATH}/*)

set(${PROJECT_HEADERS} "")
foreach(DIR ${HEADERS_PATHS})
    file(GLOB_RECURSE CURRENT_HEADERS "${DIR}/${PROJECT_NAME}/*.hpp")
    list(APPEND ${PROJECT_HEADERS} ${CURRENT_HEADERS})
endforeach()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${${PROJECT_HEADERS}})

# make library
add_library(${PROJECT_NAME} INTERFACE ${${PROJECT_HEADERS}})

# set library alias
set(PROJECT_NAMESPACE ${PROJECT_NAME}::)
set(PROJECT_ALIAS ${PROJECT_NAMESPACE}${PROJECT_NAME})
add_library(${PROJECT_ALIAS} ALIAS ${PROJECT_NAME})

# set headers folder
set(INSTALL_HEADERS_PATH include)
target_include_directories(${PROJECT_NAME} INTERFACE ${HEADERS_PATHS}
#	$<BUILD_INTERFACE:${BUILD_HEADERS_PATH}>
#	$<INSTALL_INTERFACE:${INSTALL_HEADERS_PATH}>
)

# Optional compiler flags
if(MSVC)
	target_compile_options(${PROJECT_NAME} INTERFACE /Zc:preprocessor)
else()
	#target_compile_options(${PROJECT_NAME} INTERFACE -Wall -Wextra -Wpendantic -Werror)
endif()

if (MSTD_ENABLE_CXX20)
	target_compile_definitions(${PROJECT_NAME} INTERFACE _MSTD_ENABLE_CXX20=1)
else()
	target_compile_definitions(${PROJECT_NAME} INTERFACE _MSTD_ENABLE_CXX20=0)
endif()

message(STATUS "TESTS ${BUILD_MSTD_TESTS}")

if(BUILD_MSTD_TESTS)
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/tests)
endif()

# TODO: install

# library installation
#set(PROJECT_CONFIG_FILE ${PROJECT_NAME}-config)
#install(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_CONFIG_FILE}
#	LIBRARY DESTINATION lib
#	ARCHIVE DESTINATION lib
#	RUNTIME DESTINATION bin
#	INCLUDES DESTINATION ${INSTALL_HEADERS_PATH}
#)

#install(DIRECTORY ${BUILD_HEADERS_PATH}/ DESTINATION ${INSTALL_HEADERS_PATH})
#install(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}-targets)

# export cmake config
#install(EXPORT ${PROJECT_CONFIG_FILE} DESTINATION cmake/${PROJECT_NAME} NAMESPACE ${PROJECT_NAMESPACE})
#export(EXPORT ${PROJECT_CONFIG_FILE} NAMESPACE ${PROJECT_NAMESPACE})

# configuration version file
#set(PROJECT_CONFIG_VERSION_FILE ${PROJECT_CONFIG_FILE}-version.cmake)
#include(CMakePackageConfigHelpers)
#write_basic_package_version_file(
#	"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_CONFIG_VERSION_FILE}"
#	VERSION ${PROJECT_VERSION}
#	COMPATIBILITY AnyNewerVersion
#)

#install(FILES
#	"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_CONFIG_VERSION_FILE}"
#	DESTINATION cmake/${PROJECT_NAME}
#)